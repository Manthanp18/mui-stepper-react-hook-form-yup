{"ast":null,"code":"import _regeneratorRuntime from \"/Users/upforcetech/Desktop/9fkxo/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/upforcetech/Desktop/9fkxo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/upforcetech/Desktop/9fkxo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/upforcetech/Desktop/9fkxo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { transformToNestObject } from 'react-hook-form';\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\n\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return Array.isArray(error.inner) && error.inner.length ? error.inner.reduce(function (previous, _ref) {\n    var path = _ref.path,\n        message = _ref.message,\n        type = _ref.type;\n    // @ts-expect-error\n    var previousTypes = previous[path] && previous[path].types || {};\n    var key = path || type;\n    return Object.assign(Object.assign({}, previous), key ? _defineProperty({}, key, Object.assign(Object.assign({}, previous[key] || {\n      message: message,\n      type: type\n    }), validateAllFieldCriteria ? {\n      types: Object.assign(Object.assign({}, previousTypes), _defineProperty({}, type, previousTypes[type] ? // @ts-expect-error\n      [].concat(_toConsumableArray([].concat(previousTypes[type])), [message]) : message))\n    } : {})) : {});\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\n\nexport var yupResolver = function yupResolver(schema) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    abortEarly: false\n  };\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(values, context) {\n      var validateAllFieldCriteria,\n          parsedErrors,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              validateAllFieldCriteria = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n              _context.prev = 1;\n\n              if (options.context && process.env.NODE_ENV === 'development') {\n                // eslint-disable-next-line no-console\n                console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\");\n              }\n\n              _context.next = 5;\n              return schema.validate(values, Object.assign(Object.assign({}, options), {\n                context: context\n              }));\n\n            case 5:\n              _context.t0 = _context.sent;\n              _context.t1 = {};\n              return _context.abrupt(\"return\", {\n                values: _context.t0,\n                errors: _context.t1\n              });\n\n            case 10:\n              _context.prev = 10;\n              _context.t2 = _context[\"catch\"](1);\n              parsedErrors = parseErrorSchema(_context.t2, validateAllFieldCriteria);\n              return _context.abrupt(\"return\", {\n                values: {},\n                errors: transformToNestObject(parsedErrors)\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"mappings":";;;;;AAAA;AACA,SAAmBA,qBAAnB,QAA6D,iBAA7D;AAGA;;;;;;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBC,KADuB,EAEvBC,wBAFuB,EAGrB;EACF,OAAOC,KAAK,CAACC,OAAN,CAAcH,KAAK,CAACI,KAApB,KAA8BJ,KAAK,CAACI,KAAN,CAAYC,MAA1C,GACHL,KAAK,CAACI,KAAN,CAAYE,MAAZ,CACE,UAACC,QAAD,QAA2D;IAAA,IAAzBC,IAAyB,QAAzBA,IAAyB;IAAA,IAAnBC,OAAmB,QAAnBA,OAAmB;IAAA,IAAVC,IAAU,QAAVA,IAAU;IACzD;IACA,IAAMC,aAAa,GAAIJ,QAAQ,CAACC,IAAD,CAAR,IAAkBD,QAAQ,CAACC,IAAD,CAAR,CAAeI,KAAlC,IAA4C,EAAlE;IACA,IAAMC,GAAG,GAAGL,IAAI,IAAIE,IAApB;IAEA,uCACKH,QADL,GAEMM,GAAG,uBAEAA,GAFA,EAEIC,gCACCP,QAAQ,CAACM,GAAD,CAAR,IAAiB;MACnBJ,OAAO,EAAPA,OADmB;MAEnBC,IAAI,EAAJA;IAFmB,CADlB,GAKCT,wBAAwB,GACxB;MACEW,KAAK,kCACAD,aADA,uBAGFD,IAHE,EAGKC,aAAa,CAACD,IAAD,CAAb,GACJ;MADI,6BAEA,GAAGK,MAAH,CAAUJ,aAAa,CAACD,IAAD,CAAvB,CAFA,IAEgCD,OAFhC,KAGJA,OAND;IADP,CADwB,GAWxB,EAhBD,CAFJ,IAqBH,EAvBN;EAyBD,CA/BH,EAgCE,EAhCF,CADG,uBAqCAT,KAAK,CAACQ,IArCN,EAqCa;IAAEC,OAAO,EAAET,KAAK,CAACS,OAAjB;IAA0BC,IAAI,EAAEV,KAAK,CAACU;EAAtC,CArCb,CAAP;AAuCD,CA3CD;;AAiDA,OAAO,IAAMM,WAAW,GAAG,SAAdA,WAAc,CACzBC,MADyB;EAAA,IAEzBC,OAFyB,uEAEuB;IAC9CC,UAAU,EAAE;EADkC,CAFvB;EAAA;IAAA,uEAKE,iBAC3BC,MAD2B,EAE3BC,OAF2B;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAG3BpB,wBAH2B,2DAGA,KAHA;cAAA;;cAMzB,IAAIiB,OAAO,CAACG,OAAR,IAAmBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAhD,EAA+D;gBAC7D;gBACAC,OAAO,CAACC,IAAR,CACE,+FADF;cAGD;;cAXwB;cAAA,OAaTT,MAAM,CAACU,QAAP,CAAgBP,MAAhB,EAAsBN,gCAC/BI,OAD+B,GACxB;gBACVG,OAAO,EAAPA;cADU,CADwB,CAAtB,CAbS;;YAAA;cAAA;cAAA,cAiBf,EAjBe;cAAA;gBAavBD,MAbuB;gBAiBvBQ,MAjBuB;cAAA;;YAAA;cAAA;cAAA;cAoBnBC,YApBmB,GAoBJ9B,gBAAgB,cAAIE,wBAAJ,CApBZ;cAAA,iCAqBlB;gBACLmB,MAAM,EAAE,EADH;gBAELQ,MAAM,EAAE9B,qBAAqB,CAAC+B,YAAD;cAFxB,CArBkB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CALF;;IAAA;MAAA;IAAA;EAAA;AAAA,CAApB","names":["transformToNestObject","parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","inner","length","reduce","previous","path","message","type","previousTypes","types","key","Object","concat","yupResolver","schema","options","abortEarly","values","context","process","env","NODE_ENV","console","warn","validate","errors","parsedErrors"],"sourceRoot":"","sources":["../src/yup.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}